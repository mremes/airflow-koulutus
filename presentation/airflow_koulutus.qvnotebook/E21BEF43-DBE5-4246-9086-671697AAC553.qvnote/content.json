{
  "title": "Mielenkiintoisia operaattoreita",
  "cells": [
    {
      "type": "markdown",
      "data": "### Koodinajo-operaattorit\n\nKoodinajo-operaattoreilla voi ajaa koodia jossakin ajoympäristössä. Koodi ajetaan joko lokaalisti, kun käytetään `SequentialExecutor`ia tai `LocalExecutor`ia, tai työklusterissa `CeleryExecutor`ia käytettäessä.\n\n#### BashOperator\n\n`BashOperator` ajaa bash-komennon. Komento voi olla esim. jokin Linux-systeemin komento tai jokin koodirepositoriossa oleva Python-skripti, Java-ohjelma tms. komennon triggeröimä käyttöjärjestelmän prosessi.\n\nSille voi määrittää ympäristömuuttujat `dict`-objektin konstruktoriin antamalla.\n\n`XCom`iin on mahdollista puskea komennon/skriptin viimeinen ulostulorivi.\n\n#### PythonOperator\n\n`PythonOperator` suorittaa funktion (tai tarkemmin, `callable`-objektin) Python-moduulista tai standardikirjastosta.\n\nKonstruktorissa määritetään nimettömät (args) ja nimetyt (kwargs) argumentit.\n\nOmien argumenttien lisäksi on mahdollista tarjota ajonaikainen konteksti, jossa on tietoja DAG-ajon tiedoista (esim. aika, DAG:n nimi jne.). Tutustutaan Airflow-kontekstiin tarkemmin myöhemmin.\n\nOn mahdollista tarjota myös templates parametreja ja renderöitäviä tiedostopäätteitä. Tutustutaan näihinkin myöhemmin.\n\n#### DockerOperator\n`DockerOperator` mahdollistaa komennon ajamisen Docker-kontin sisällä. Parametrejä ovat Docker-imagen tunniste, ajettava komento, annettujen CPU:iden/muistin määrä, levyt, ympäristömuuttujat, verkkomoodi, sertifikaatit, ...\n\nVoi myös määrittää, tapetaanko Docker-kontti heti kun komento on ajettu. On siis mahdollista ajaa koodia tosi monessa käyttisympäristössä (Linux RHEL, SLES, Ubuntu, Centos, Windows Server)\n\n#### EmailOperator, SlackOperator\n\nKun sähköpostipalvelin on määritelty konfiguraatiossa, `EmailOperator`illa on mahdollista lähettää sähköpostiviestejä. Tämä on hyödyllistä, kun esimerkiksi halutaan raportoida jonkun ehdollisen työn valmistumisesta. Syötettävät tiedot ovat kuin tavanomaisesta sähköpostista (otsikko, vastaanottaja, ...)\n\n`SlackAPIOperator`illa pystyy kutsumaan mitä tahansa Slack API:n metodeja. \n\n`SlackAPIOperator`ista on johdettu `SlackAPIPostOperator`, jolla pystyy lähettämään viestin Slack-kanavalle – mikä lienee yleisin use case.\n\nTemplatoituina parametreina kanava, lähettäjän nimi, teksti, liitteet jne.\n\n#### SensorOperator\n`SensorOperator` kuuntelee toisessa DAG:issa olevaa työtä. Se on suunniteltu erityisesti DAG:ien välisten riippuvuuksien koodaamiseen. Siitä tulee onnistunut kun sen kuuntelema työ onnistuu"
    }
  ]
}